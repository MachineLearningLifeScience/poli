[build-system]
requires = ["setuptools<=68"]
build-backend = "setuptools.build_meta"

[project]
name = "poli"
version = "1.0.0.dev9"
description = "poli, a library of discrete objective functions"
readme = "README.md"
authors = [{name="Miguel González-Duque", email="miguelgondu@gmail.com"}, {name="Simon Bartels"}]
license = {file = "LICENSE"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["optimization", "molecular", "discrete", "proteins"]
dependencies = [
    "numpy<2",
    "rdkit",
    "selfies"
]

[project.optional-dependencies]
foldx = [
    "biopython",
    "python-levenshtein",
    "pdb-tools",
]
protein = [
    "biopython",
    "python-levenshtein",
    "pdb-tools",
]
ehrlich_holo = [
    "pytorch-holo",
]
tdc = [
    "pytdc",
]
dockstring = [
    "dockstring"
]
rmf = [
    "scipy",
]
dev = ["black", "tox", "pytest", "bump-my-version"]
docs = ["sphinx", "furo"]

[project.urls]
Homepage = "https://github.com/MachineLearningLifeScience/poli"

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "poli__lambo: marks tests that run in the poli__lambo environment",
    "poli__dockstring: marks tests that run in the poli__dockstring environment",
    "poli__tdc: marks tests that run in the poli__tdc environment",
    "poli__protein: marks tests that run in the poli__protein environment",
    "poli__rasp: marks tests that run in the poli__rasp environment",
    "poli__rmf: marks tests that run in poli__rmf environment",
    "unmarked: All other tests, which usually run in the base environment",
]

[tool.isort]
profile = "black"

[tool.ruff]
exclude = ["src/poli/core/util/proteins/rasp/inner_rasp", "src/poli/objective_repository/gfp_cbas"]

[tool.bumpversion]
current_version = "1.0.0.dev9"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        .                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}.{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]
search = 'current_version = "{current_version}"'
replace = 'current_version = "{new_version}"'
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[tool.bumpversion.parts.pre_l]
values = ["dev"]

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/poli/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "setup.cfg"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'